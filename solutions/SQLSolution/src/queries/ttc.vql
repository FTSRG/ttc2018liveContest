package queries

import "https://www.transformation-tool-contest.eu/2018/social_media"

// task 1
pattern task1(post: Post, score: java Integer) {
	Post(post);
	commCount == count find transitivelyCommented(post, _comment1, _);
	userCount == sum   find transitivelyCommented(post, _comment2, #commentLikeCount);
	score == eval(10*commCount + userCount);
}

pattern transitivelyCommented(post: Post, comment: Comment, commentLikeCount: java Integer) {
	find commented+(post, comment);
	commentLikeCount == count find likes(_user, comment);
}

pattern commented(submission: Submission, comment: Comment) {
	Comment.commented(comment, submission);
}

pattern likes(user: User, comment: Comment) {
	User.likes(user, comment); 
}
 
// task 2
pattern task2(comment: Comment, score: java Integer) {
	score == sum find commentComponentSize(comment, _user, #componentSize);
}

pattern commentComponentSize(comment: Comment, user: User, size: java Integer) {
	size == count find transitiveFriendLikers(comment, user, _otherUser);
	User.likes(user, comment);
}

pattern transitiveFriendLikers(comment: Comment, user1: User, user2: User) {
	User.likes(user1, comment);
	user1 == user2;
} or {
	find mutuallyLikedComment(comment, user1, friend);
	find transitiveFriendLikers(comment, friend, user2);
}

pattern mutuallyLikedComment(comment: Comment, user1: User, user2: User) {
	User.friends(user1, user2);
	User.likes(user1, comment);
	User.likes(user2, comment);
}